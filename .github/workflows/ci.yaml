name: ci

on:
  push:
    branches:
      - 'master'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_I386: "ghcr.io/0xffea/rtems-i386-tools:latest"
  IMAGE_NAME_RISCV: "ghcr.io/0xffea/rtems-riscv-tools:latest"
  IMAGE_NAME_LM32: "ghcr.io/0xffea/rtems-lm32-tools:latest"
  IMAGE_NAME_MICROBLAZE: "ghcr.io/0xffea/rtems-microblaze-tools:latest"

jobs:
  rtems-i386:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push I386
        id: docker_build_i386
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_I386 }}
          file: Dockerfile
      -
        name: Inspect
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME_I386 }}
  rtems-riscv:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push RISC-V
        id: docker_build_riscv
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_RISCV }}
          file: Dockerfile.riscv
      -
        name: Inspect
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME_RISCV }}
  rtems-lm32:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push LM32
        id: docker_build_lm32
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_LM32 }}
          file: Dockerfile.lm32
      -
        name: Inspect
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME_LM32 }}
  rtems-microblaze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push microblaze
        id: docker_build_microblaze
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_NAME_MICROBLAZE }}
          file: Dockerfile.microblaze
      -
        name: Inspect
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME_MICROBLAZE }}
